type Product {
  id: ID!
  name: String!
  slug: String!
  description: String!
  status: ActiveStatus!
  price: [ProductPrice]
}

type ProductPrice {
  amount: Int!
  currency: String
  includes_tax: Boolean!
}

enum ActiveStatus {
  draft
  live
}

type Brand {
  id: ID!
  type: String!
  name: String!
  slug: String!
  description: String
  status: ActiveStatus!
}

type Collection {
  id: ID!
  type: String!
  status: ActiveStatus
  name: String
  slug: String
  description: String
}

type Category {
  id: ID!
  type: String!
  status: ActiveStatus
  name: String
  slug: String
  description: String
}

type CartItem {
  id: ID!
  type: String!
  name: String!
  description: String
  quantity: Int!
}

type Cart {
  id: ID!
  items: [CartItem]
}

enum AuthGrantType {
  client_credentials
  implicit
  refresh_token
}

type AuthenticatePayload {
  expires: Int!
  identifier: String!
  expires_in: Int!
  access_token: String!
  token_type: String!
}

type Checkout {
  id: ID!
}

type Payment {
  id: ID!
}

type Query {
  allProducts: [Product]
  Product(id: ID!): Product
  allBrands: [Brand]
  Brand(id: ID!): Brand
  allCollections: [Collection]
  Collection(id: ID!): Collection
  allCategories: [Category]
  Category(id: ID!): Category
  Cart: Cart
}

input CheckoutInput {
  cartId: ID!
}

type Mutation {
  authenticate(
    clientId: String!
    clientSecret: String
    grantType: AuthGrantType!
  ): AuthenticatePayload
  addToCart(productId: ID!, cartId: ID): Cart
  checkout(input: CheckoutInput!): Checkout
  pay(checkoutId: ID!): Payment
}
